# Generated by Django 3.1.8 on 2021-04-20 10:09

from django.db import migrations
from django.db.backends.postgresql.schema import DatabaseSchemaEditor
from django.db.migrations.state import StateApps


def backfill_realm_import_log_events(apps: StateApps, schema_editor: DatabaseSchemaEditor) -> None:
    Message = apps.get_model("zerver", "Message")

    Realm = apps.get_model("zerver", "Realm")
    Realm.SELF_HOSTED = 1
    Realm.LIMITED = 2

    RealmAuditLog = apps.get_model("zerver", "RealmAuditLog")
    RealmAuditLog.REALM_PLAN_TYPE_CHANGED = 204
    RealmAuditLog.REALM_IMPORTED = 216

    services = ["slack", "hipchat", "mattermost", "gitter"]

    for service in services:
        objects_to_create = []
        # Query works only for some gitter realms. So a manual migration of remaining
        # gitter realms is required.
        imported_realm_ids = (
            Message.objects.filter(subject__iexact=f"imported from {service}")
            .values_list("sender__realm_id", flat=True)
            .distinct()
        )
        for imported_realm_id in imported_realm_ids:
            imported_realm = Realm.objects.get(id=imported_realm_id)
            if RealmAuditLog.objects.filter(
                realm=imported_realm, event_type=RealmAuditLog.REALM_IMPORTED
            ).exists():
                continue

            entry = RealmAuditLog(
                realm=imported_realm,
                event_type=RealmAuditLog.REALM_IMPORTED,
                event_time=imported_realm.date_created,
                extra_data={"from": service},
                backfilled=True,
            )
            objects_to_create.append(entry)
        RealmAuditLog.objects.bulk_create(objects_to_create)

    # Every organization that we've imported from a Zulip server should match this.
    objects_to_create = []
    plan_type_changed_logs = RealmAuditLog.objects.filter(
        event_type=RealmAuditLog.REALM_PLAN_TYPE_CHANGED,
        acting_user=None,
        extra_data=f"{{'old_value': {Realm.SELF_HOSTED}, 'new_value': {Realm.LIMITED}}}",
    )
    for plan_type_changed_log in plan_type_changed_logs:
        if RealmAuditLog.objects.filter(
            realm=plan_type_changed_log.realm, event_type=RealmAuditLog.REALM_IMPORTED
        ).exists():
            continue

        entry = RealmAuditLog(
            realm=plan_type_changed_log.realm,
            event_type=RealmAuditLog.REALM_IMPORTED,
            event_time=plan_type_changed_log.event_time,
            backfilled=True,
        )
        objects_to_create.append(entry)

    RealmAuditLog.objects.bulk_create(objects_to_create)


def reverse_code(apps: StateApps, schema_editor: DatabaseSchemaEditor) -> None:
    RealmAuditLog = apps.get_model("zerver", "RealmAuditLog")
    RealmAuditLog.REALM_IMPORTED = 216
    RealmAuditLog.objects.filter(event_type=RealmAuditLog.REALM_IMPORTED, backfilled=True).delete()


class Migration(migrations.Migration):

    dependencies = [
        ("zerver", "0324_fix_deletion_cascade_behavior"),
    ]

    operations = [
        migrations.RunPython(
            backfill_realm_import_log_events, reverse_code=reverse_code, elidable=True
        )
    ]
