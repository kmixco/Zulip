# -*- coding: utf-8 -*-
# Generated by Django 1.11.13 on 2018-07-10 14:45
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
from django.db.migrations.state import StateApps
from django.db.models import Max
from django.db.backends.postgresql_psycopg2.schema import DatabaseSchemaEditor
from django.utils.timezone import now as timezone_now
import django.db.models.deletion

import zerver.lib.utils

def copy_api_keys(apps: StateApps, schema_editor: DatabaseSchemaEditor) -> None:
    RealmAuditLog = apps.get_model('zerver', 'RealmAuditLog')
    UserProfile = apps.get_model('zerver', 'UserProfile')
    UserAPIKey = apps.get_model('zerver', 'UserAPIKey')
    users = UserProfile.objects.all()
    LEGACY_API_KEY_DESCRIPTION = "Legacy API key"

    for user in users:
        # First, compute the date the user's API key last changed:
        last_key_regeneration_date = RealmAuditLog.objects.filter(
            modified_user_id=user.id,
            event_type='user_api_key_changed'
        ).aggregate(Max('event_time'))['event_time__max']

        if last_key_regeneration_date is not None:
            date_created = last_key_regeneration_date
        else:
            # Most API keys will never never been regenerated after
            # RealmAuditLogs were implemented, so if there are no
            # records of the API key changing, for this user, we asume
            # it was created the same time as the user
            date_created = user.date_joined

        UserAPIKey.objects.create(user_profile_id=user.id,
                                  api_key=user.api_key,
                                  description=LEGACY_API_KEY_DESCRIPTION,
                                  date_created=date_created)

def reverse_copy_api_keys(apps: StateApps, schema_editor: DatabaseSchemaEditor) -> None:
    UserProfile = apps.get_model('zerver', 'UserProfile')
    UserAPIKey = apps.get_model('zerver', 'UserAPIKey')

    for user_profile in UserProfile.objects.all():
        user_api_key = UserAPIKey.objects.filter(
            user_profile=user_profile).order_by("id").first()
        if user_api_key is not None:
            user_profile.api_key = user_api_key.api_key
            user_profile.save(update_fields=["api_key"])

class Migration(migrations.Migration):
    dependencies = [
        ('zerver', '0241_usermessage_bigint_id_migration_finalize'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserAPIKey',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True,
                                        serialize=False,
                                        verbose_name='ID')),
                ('description', models.CharField(max_length=100)),
                ('date_created', models.DateTimeField(default=timezone_now)),
                ('api_key', models.CharField(max_length=32,
                                             default=zerver.lib.utils.generate_api_key)),
            ],
        ),
        migrations.AddField(
            model_name='userapikey',
            name='user_profile',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='api_key',
            field=models.CharField(max_length=32, null=True),
        ),
        migrations.RunPython(copy_api_keys,
                             reverse_code=reverse_copy_api_keys),
        migrations.RemoveField(
            model_name='userprofile',
            name='api_key',
        ),
    ]
