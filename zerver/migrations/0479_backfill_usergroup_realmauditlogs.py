# Generated by Django 4.2.1 on 2023-06-05 21:48
import itertools

import orjson
from django.db import migrations, transaction
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from django.db.migrations.state import StateApps
from django.utils.timezone import now as timezone_now

USER_GROUP_CREATED = 701
USER_GROUP_DIRECT_USER_MEMBERSHIP_ADDED = 703
USER_GROUP_DIRECT_SUBGROUP_MEMBERSHIP_ADDED = 705
USER_GROUP_DIRECT_SUPERGROUP_MEMBERSHIP_ADDED = 707


def backfill_user_group_audit_logs(
    apps: StateApps, schema_editor: BaseDatabaseSchemaEditor
) -> None:
    UserGroup = apps.get_model("zerver", "UserGroup")
    RealmAuditLog = apps.get_model("zerver", "RealmAuditLog")

    for user_group in UserGroup.objects.all().prefetch_related(
        "direct_members", "direct_subgroups"
    ):
        now = timezone_now()
        with transaction.atomic():
            # We only need to backfill audit log entries for the direct user and subgroup memberships
            # assuming that it will be backfilled for all user groups eventually. supergroup memberships
            # are supposed to be managed by previous iterations.
            backfills = []
            direct_member_ids_set = {member.id for member in user_group.direct_members.all()}
            direct_subgroup_ids_set = {
                subgroup.id for subgroup in user_group.direct_subgroups.all()
            }

            # We can potentially move this query outside the for-loop and generate a set
            # of user group ids.
            need_user_group_creation_audit_log = not RealmAuditLog.objects.filter(
                modified_user_group_id=user_group.id,
                event_type=USER_GROUP_CREATED,
            ).exists()
            member_ids_set = set(
                RealmAuditLog.objects.filter(
                    modified_user_group_id=user_group.id,
                    event_type=USER_GROUP_DIRECT_USER_MEMBERSHIP_ADDED,
                )
                .distinct("modified_user_id")
                .values_list("modified_user_id", flat=True)
            )
            try:
                subgroup_ids_set = {
                    itertools.chain(
                        orjson.loads(extra_data)["subgroup_ids"]
                        for extra_data in RealmAuditLog.objects.filter(
                            modified_user_group_id=user_group.id,
                            event_type=USER_GROUP_DIRECT_SUBGROUP_MEMBERSHIP_ADDED,
                        ).values_list("extra_data", flat=True)
                    )
                }
            except orjson.JSONDecodeError as e:
                raise RuntimeError(f'"{e.doc}" is not valid JSON')

            missing_member_ids = direct_member_ids_set - member_ids_set
            missing_subgroup_ids = direct_subgroup_ids_set - subgroup_ids_set

            if need_user_group_creation_audit_log:
                backfills.append(
                    RealmAuditLog(
                        backfilled=True,
                        realm_id=user_group.realm.id,
                        modified_user_group_id=user_group.id,
                        event_type=USER_GROUP_CREATED,
                        event_time=now,
                    )
                )

            backfills.extend(
                RealmAuditLog(
                    backfilled=True,
                    realm_id=user_group.realm.id,
                    modified_user_group_id=user_group.id,
                    modified_user_id=missing_member_id,
                    event_type=USER_GROUP_DIRECT_USER_MEMBERSHIP_ADDED,
                    event_time=now,
                )
                for missing_member_id in missing_member_ids
            )

            for missing_subgroup_id in missing_subgroup_ids:
                backfills.extend(
                    [
                        RealmAuditLog(
                            backfilled=True,
                            realm_id=user_group.realm.id,
                            modified_user_group_id=user_group.id,
                            event_type=USER_GROUP_DIRECT_SUBGROUP_MEMBERSHIP_ADDED,
                            event_time=now,
                            extra_data=orjson.dumps({"subgroup_ids": missing_subgroup_id}).decode(),
                        ),
                        RealmAuditLog(
                            backfilled=True,
                            realm_id=user_group.realm.id,
                            modified_user_group_id=missing_subgroup_id,
                            event_type=USER_GROUP_DIRECT_SUPERGROUP_MEMBERSHIP_ADDED,
                            event_time=now,
                            extra_data=orjson.dumps({"supergroup_ids": user_group.id}).decode(),
                        ),
                    ]
                )

            RealmAuditLog.objects.bulk_create(backfills)


class Migration(migrations.Migration):
    dependencies = [
        ("zerver", "0478_usergroup_deactivated"),
    ]

    operations = [
        migrations.RunPython(
            backfill_user_group_audit_logs, reverse_code=migrations.RunPython.noop, elidable=True
        )
    ]
