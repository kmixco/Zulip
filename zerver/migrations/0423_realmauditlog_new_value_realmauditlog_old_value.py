# Generated by Django 4.1.3 on 2022-11-20 20:21

import orjson
from django.db import migrations, models
from django.db.backends.postgresql.schema import BaseDatabaseSchemaEditor
from django.db.migrations.state import StateApps


def move_old_and_new_values_from_extra_data_to_columns(
    apps: StateApps, schema_editor: BaseDatabaseSchemaEditor
) -> None:

    OLD_VALUE = "1"
    NEW_VALUE = "2"

    RealmAuditLog = apps.get_model("zerver", "RealmAuditLog")
    all_logs = RealmAuditLog.objects.exclude(extra_data=None)
    for log in all_logs:
        try:
            extra_data = orjson.loads(log.extra_data)
        except orjson.JSONDecodeError:
            continue

        if OLD_VALUE in extra_data:
            log.old_value = extra_data.pop(OLD_VALUE)
        if NEW_VALUE in extra_data:
            log.new_value = extra_data.pop(NEW_VALUE)

        log.extra_data = orjson.dumps(extra_data).decode()
        log.save()


class Migration(migrations.Migration):

    dependencies = [
        ("zerver", "0422_multiuseinvite_status"),
    ]

    operations = [
        migrations.AddField(
            model_name="realmauditlog",
            name="old_value",
            field=models.TextField(null=True),
        ),
        migrations.AddField(
            model_name="realmauditlog",
            name="new_value",
            field=models.TextField(null=True),
        ),
        migrations.RunPython(
            move_old_and_new_values_from_extra_data_to_columns,
            reverse_code=migrations.RunPython.noop,
            elidable=True,
        ),
    ]
