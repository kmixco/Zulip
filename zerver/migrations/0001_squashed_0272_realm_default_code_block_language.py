# Generated by Django 2.2.12 on 2020-04-25 23:45

import bitfield.models
import datetime
from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import zerver.models


class Migration(migrations.Migration):
    replaces = [('zerver', '0001_initial'), ('zerver', '0029_realm_subdomain'), ('zerver', '0030_realm_org_type'), ('zerver', '0031_remove_system_avatar_source'), ('zerver', '0032_verify_all_medium_avatar_images'), ('zerver', '0033_migrate_domain_to_realmalias'), ('zerver', '0034_userprofile_enable_online_push_notifications'), ('zerver', '0035_realm_message_retention_period_days'), ('zerver', '0036_rename_subdomain_to_string_id'), ('zerver', '0037_disallow_null_string_id'), ('zerver', '0038_realm_change_to_community_defaults'), ('zerver', '0039_realmalias_drop_uniqueness'), ('zerver', '0040_realm_authentication_methods'), ('zerver', '0041_create_attachments_for_old_messages'), ('zerver', '0042_attachment_file_name_length'), ('zerver', '0043_realm_filter_validators'), ('zerver', '0044_reaction'), ('zerver', '0045_realm_waiting_period_threshold'), ('zerver', '0046_realmemoji_author'), ('zerver', '0047_realm_add_emoji_by_admins_only'), ('zerver', '0048_enter_sends_default_to_false'), ('zerver', '0049_userprofile_pm_content_in_desktop_notifications'), ('zerver', '0050_userprofile_avatar_version'), ('zerver', '0051_realmalias_add_allow_subdomains'), ('zerver', '0052_auto_fix_realmalias_realm_nullable'), ('zerver', '0053_emailchangestatus'), ('zerver', '0054_realm_icon'), ('zerver', '0055_attachment_size'), ('zerver', '0056_userprofile_emoji_alt_code'), ('zerver', '0057_realmauditlog'), ('zerver', '0058_realm_email_changes_disabled'), ('zerver', '0059_userprofile_quota'), ('zerver', '0060_move_avatars_to_be_uid_based'), ('zerver', '0061_userprofile_timezone'), ('zerver', '0062_default_timezone'), ('zerver', '0063_realm_description'), ('zerver', '0064_sync_uploads_filesize_with_db'), ('zerver', '0065_realm_inline_image_preview'), ('zerver', '0066_realm_inline_url_embed_preview'), ('zerver', '0067_archived_models'), ('zerver', '0068_remove_realm_domain'), ('zerver', '0069_realmauditlog_extra_data'), ('zerver', '0070_userhotspot'), ('zerver', '0071_rename_realmalias_to_realmdomain'), ('zerver', '0072_realmauditlog_add_index_event_time'), ('zerver', '0073_custom_profile_fields'), ('zerver', '0074_fix_duplicate_attachments'), ('zerver', '0075_attachment_path_id_unique'), ('zerver', '0076_userprofile_emojiset'), ('zerver', '0077_add_file_name_field_to_realm_emoji'), ('zerver', '0078_service'), ('zerver', '0079_remove_old_scheduled_jobs'), ('zerver', '0080_realm_description_length'), ('zerver', '0081_make_emoji_lowercase'), ('zerver', '0082_index_starred_user_messages'), ('zerver', '0083_index_mentioned_user_messages'), ('zerver', '0084_realmemoji_deactivated'), ('zerver', '0085_fix_bots_with_none_bot_type'), ('zerver', '0086_realm_alter_default_org_type'), ('zerver', '0087_remove_old_scheduled_jobs'), ('zerver', '0088_remove_referral_and_invites'), ('zerver', '0089_auto_20170710_1353'), ('zerver', '0090_userprofile_high_contrast_mode'), ('zerver', '0091_realm_allow_edit_history'), ('zerver', '0092_create_scheduledemail'), ('zerver', '0093_subscription_event_log_backfill'), ('zerver', '0094_realm_filter_url_validator'), ('zerver', '0095_index_unread_user_messages'), ('zerver', '0096_add_password_required'), ('zerver', '0097_reactions_emoji_code'), ('zerver', '0098_index_has_alert_word_user_messages'), ('zerver', '0099_index_wildcard_mentioned_user_messages'), ('zerver', '0100_usermessage_remove_is_me_message'), ('zerver', '0101_muted_topic'), ('zerver', '0102_convert_muted_topic'), ('zerver', '0103_remove_userprofile_muted_topics'), ('zerver', '0104_fix_unreads'), ('zerver', '0105_userprofile_enable_stream_push_notifications'), ('zerver', '0106_subscription_push_notifications'), ('zerver', '0107_multiuseinvite'), ('zerver', '0108_fix_default_string_id'), ('zerver', '0109_mark_tutorial_status_finished'), ('zerver', '0110_stream_is_in_zephyr_realm'), ('zerver', '0111_botuserstatedata'), ('zerver', '0112_index_muted_topics'), ('zerver', '0113_default_stream_group'), ('zerver', '0114_preregistrationuser_invited_as_admin'), ('zerver', '0115_user_groups'), ('zerver', '0116_realm_allow_message_deleting'), ('zerver', '0117_add_desc_to_user_group'), ('zerver', '0118_defaultstreamgroup_description'), ('zerver', '0119_userprofile_night_mode'), ('zerver', '0120_botuserconfigdata'), ('zerver', '0121_realm_signup_notifications_stream'), ('zerver', '0122_rename_botuserstatedata_botstoragedata'), ('zerver', '0123_userprofile_make_realm_email_pair_unique'), ('zerver', '0124_stream_enable_notifications'), ('zerver', '0125_realm_max_invites'), ('zerver', '0126_prereg_remove_users_without_realm'), ('zerver', '0127_disallow_chars_in_stream_and_user_name'), ('zerver', '0128_scheduledemail_realm'), ('zerver', '0129_remove_userprofile_autoscroll_forever'), ('zerver', '0130_text_choice_in_emojiset'), ('zerver', '0131_realm_create_generic_bot_by_admins_only'), ('zerver', '0132_realm_message_visibility_limit'), ('zerver', '0133_rename_botuserconfigdata_botconfigdata'), ('zerver', '0134_scheduledmessage'), ('zerver', '0135_scheduledmessage_delivery_type'), ('zerver', '0136_remove_userprofile_quota'), ('zerver', '0137_realm_upload_quota_gb'), ('zerver', '0138_userprofile_realm_name_in_notifications'), ('zerver', '0139_fill_last_message_id_in_subscription_logs'), ('zerver', '0140_realm_send_welcome_emails'), ('zerver', '0141_change_usergroup_description_to_textfield'), ('zerver', '0142_userprofile_translate_emoticons'), ('zerver', '0143_realm_bot_creation_policy'), ('zerver', '0144_remove_realm_create_generic_bot_by_admins_only'), ('zerver', '0145_reactions_realm_emoji_name_to_id'), ('zerver', '0146_userprofile_message_content_in_email_notifications'), ('zerver', '0147_realm_disallow_disposable_email_addresses'), ('zerver', '0148_max_invites_forget_default'), ('zerver', '0149_realm_emoji_drop_unique_constraint'), ('zerver', '0150_realm_allow_community_topic_editing'), ('zerver', '0151_last_reminder_default_none'), ('zerver', '0152_realm_default_twenty_four_hour_time'), ('zerver', '0153_remove_int_float_custom_fields'), ('zerver', '0154_fix_invalid_bot_owner'), ('zerver', '0155_change_default_realm_description'), ('zerver', '0156_add_hint_to_profile_field'), ('zerver', '0157_userprofile_is_guest'), ('zerver', '0158_realm_video_chat_provider'), ('zerver', '0159_realm_google_hangouts_domain'), ('zerver', '0160_add_choice_field'), ('zerver', '0161_realm_message_content_delete_limit_seconds'), ('zerver', '0162_change_default_community_topic_editing'), ('zerver', '0163_remove_userprofile_default_desktop_notifications'), ('zerver', '0164_stream_history_public_to_subscribers'), ('zerver', '0165_add_date_to_profile_field'), ('zerver', '0166_add_url_to_profile_field'), ('zerver', '0167_custom_profile_fields_sort_order'), ('zerver', '0168_stream_is_web_public'), ('zerver', '0169_stream_is_announcement_only'), ('zerver', '0170_submessage'), ('zerver', '0171_userprofile_dense_mode'), ('zerver', '0172_add_user_type_of_custom_profile_field'), ('zerver', '0173_support_seat_based_plans'), ('zerver', '0174_userprofile_delivery_email'), ('zerver', '0175_change_realm_audit_log_event_type_tense'), ('zerver', '0176_remove_subscription_notifications'), ('zerver', '0177_user_message_add_and_index_is_private_flag'), ('zerver', '0178_rename_to_emails_restricted_to_domains'), ('zerver', '0179_rename_to_digest_emails_enabled'), ('zerver', '0180_usermessage_add_active_mobile_push_notification'), ('zerver', '0181_userprofile_change_emojiset'), ('zerver', '0182_set_initial_value_is_private_flag'), ('zerver', '0183_change_custom_field_name_max_length'), ('zerver', '0184_rename_custom_field_types'), ('zerver', '0185_realm_plan_type'), ('zerver', '0186_userprofile_starred_message_counts'), ('zerver', '0187_userprofile_is_billing_admin'), ('zerver', '0188_userprofile_enable_login_emails'), ('zerver', '0189_userprofile_add_some_emojisets'), ('zerver', '0190_cleanup_pushdevicetoken'), ('zerver', '0191_realm_seat_limit'), ('zerver', '0192_customprofilefieldvalue_rendered_value'), ('zerver', '0193_realm_email_address_visibility'), ('zerver', '0194_userprofile_notification_sound'), ('zerver', '0195_realm_first_visible_message_id'), ('zerver', '0196_add_realm_logo_fields'), ('zerver', '0197_azure_active_directory_auth'), ('zerver', '0198_preregistrationuser_invited_as'), ('zerver', '0199_userstatus'), ('zerver', '0200_remove_preregistrationuser_invited_as_admin'), ('zerver', '0201_zoom_video_chat'), ('zerver', '0202_add_user_status_info'), ('zerver', '0203_realm_message_content_allowed_in_email_notifications'), ('zerver', '0204_remove_realm_billing_fields'), ('zerver', '0205_remove_realmauditlog_requires_billing_update'), ('zerver', '0206_stream_rendered_description'), ('zerver', '0207_multiuseinvite_invited_as'), ('zerver', '0208_add_realm_night_logo_fields'), ('zerver', '0209_stream_first_message_id'), ('zerver', '0210_stream_first_message_id'), ('zerver', '0211_add_users_field_to_scheduled_email'), ('zerver', '0212_make_stream_email_token_unique'), ('zerver', '0213_realm_digest_weekday'), ('zerver', '0214_realm_invite_to_stream_policy'), ('zerver', '0215_realm_avatar_changes_disabled'), ('zerver', '0216_add_create_stream_policy'), ('zerver', '0217_migrate_create_stream_policy'), ('zerver', '0218_remove_create_stream_by_admins_only'), ('zerver', '0219_toggle_realm_digest_emails_enabled_default'), ('zerver', '0220_subscription_notification_settings'), ('zerver', '0221_subscription_notifications_data_migration'), ('zerver', '0222_userprofile_fluid_layout_width'), ('zerver', '0223_rename_to_is_muted'), ('zerver', '0224_alter_field_realm_video_chat_provider'), ('zerver', '0225_archived_reaction_model'), ('zerver', '0226_archived_submessage_model'), ('zerver', '0227_inline_url_embed_preview_default_off'), ('zerver', '0228_userprofile_demote_inactive_streams'), ('zerver', '0229_stream_message_retention_days'), ('zerver', '0230_rename_to_enable_stream_audible_notifications'), ('zerver', '0231_add_archive_transaction_model'), ('zerver', '0232_make_archive_transaction_field_not_nullable'), ('zerver', '0233_userprofile_avatar_hash'), ('zerver', '0234_add_external_account_custom_profile_field'), ('zerver', '0235_userprofile_desktop_icon_count_display'), ('zerver', '0236_remove_illegal_characters_email_full'), ('zerver', '0237_rename_zulip_realm_to_zulipinternal'), ('zerver', '0238_usermessage_bigint_id'), ('zerver', '0239_usermessage_copy_id_to_bigint_id'), ('zerver', '0240_usermessage_migrate_bigint_id_into_id'), ('zerver', '0241_usermessage_bigint_id_migration_finalize'), ('zerver', '0242_fix_bot_email_property'), ('zerver', '0243_message_add_date_sent_column'), ('zerver', '0244_message_copy_pub_date_to_date_sent'), ('zerver', '0245_message_date_sent_finalize_part1'), ('zerver', '0246_message_date_sent_finalize_part2'), ('zerver', '0247_realmauditlog_event_type_to_int'), ('zerver', '0248_userprofile_role_start'), ('zerver', '0249_userprofile_role_finish'), ('zerver', '0250_saml_auth'), ('zerver', '0251_prereg_user_add_full_name'), ('zerver', '0252_realm_user_group_edit_policy'), ('zerver', '0253_userprofile_wildcard_mentions_notify'), ('zerver', '0209_user_profile_no_empty_password'), ('zerver', '0254_merge_0209_0253'), ('zerver', '0255_userprofile_stream_add_recipient_column'), ('zerver', '0256_userprofile_stream_set_recipient_column_values'), ('zerver', '0257_fix_has_link_attribute'), ('zerver', '0258_enable_online_push_notifications_default'), ('zerver', '0259_missedmessageemailaddress'), ('zerver', '0260_missed_message_addresses_from_redis_to_db'), ('zerver', '0261_realm_private_message_policy'), ('zerver', '0262_mutedtopic_date_muted'), ('zerver', '0263_stream_stream_post_policy'), ('zerver', '0264_migrate_is_announcement_only'), ('zerver', '0265_remove_stream_is_announcement_only'), ('zerver', '0266_userpresence_realm'), ('zerver', '0267_backfill_userpresence_realm_id'), ('zerver', '0268_add_userpresence_realm_timestamp_index'), ('zerver', '0269_gitlab_auth'), ('zerver', '0270_huddle_recipient'), ('zerver', '0271_huddle_set_recipient_column_values'), ('zerver', '0272_realm_default_code_block_language')]

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    if settings.POSTGRES_MISSING_DICTIONARIES:
        fts_sql = """
CREATE TEXT SEARCH CONFIGURATION zulip.english_us_search (COPY=pg_catalog.english);
"""
    else:
        fts_sql = """
CREATE TEXT SEARCH DICTIONARY english_us_hunspell
  (template = ispell, DictFile = en_us, AffFile = en_us, StopWords = zulip_english);
CREATE TEXT SEARCH CONFIGURATION zulip.english_us_search (COPY=pg_catalog.english);
ALTER TEXT SEARCH CONFIGURATION zulip.english_us_search
  ALTER MAPPING FOR asciiword, asciihword, hword_asciipart, word, hword, hword_part
  WITH english_us_hunspell, english_stem;
"""

    fts_sql += """

CREATE FUNCTION escape_html(text) RETURNS text IMMUTABLE LANGUAGE 'sql' AS $$
  SELECT replace(replace(replace(replace(replace($1, '&', '&amp;'), '<', '&lt;'),
                                 '>', '&gt;'), '"', '&quot;'), '''', '&#39;');
$$ ;

ALTER TABLE zerver_message ADD COLUMN search_tsvector tsvector;
CREATE INDEX zerver_message_search_tsvector ON zerver_message USING gin(search_tsvector);
ALTER INDEX zerver_message_search_tsvector SET (fastupdate = OFF);

CREATE TABLE fts_update_log (id SERIAL PRIMARY KEY, message_id INTEGER NOT NULL);
CREATE FUNCTION do_notify_fts_update_log() RETURNS trigger LANGUAGE plpgsql AS
  $$ BEGIN NOTIFY fts_update_log; RETURN NEW; END $$;
CREATE TRIGGER fts_update_log_notify AFTER INSERT ON fts_update_log
  FOR EACH STATEMENT EXECUTE PROCEDURE do_notify_fts_update_log();
CREATE FUNCTION append_to_fts_update_log() RETURNS trigger LANGUAGE plpgsql AS
  $$ BEGIN INSERT INTO fts_update_log (message_id) VALUES (NEW.id); RETURN NEW; END $$;
CREATE TRIGGER zerver_message_update_search_tsvector_async
  BEFORE INSERT OR UPDATE OF subject, rendered_content ON zerver_message
  FOR EACH ROW EXECUTE PROCEDURE append_to_fts_update_log();
"""
    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('delivery_email', models.EmailField(db_index=True, max_length=254)),
                ('email', models.EmailField(db_index=True, max_length=254)),
                ('full_name', models.CharField(max_length=100)),
                ('short_name', models.CharField(max_length=100)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('tos_version', models.CharField(max_length=10, null=True)),
                ('api_key', models.CharField(max_length=32)),
                ('pointer', models.IntegerField()),
                ('last_pointer_updater', models.CharField(max_length=64)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('is_billing_admin', models.BooleanField(db_index=True, default=False)),
                ('is_bot', models.BooleanField(db_index=True, default=False)),
                ('bot_type', models.PositiveSmallIntegerField(db_index=True, null=True)),
                ('role', models.PositiveSmallIntegerField(db_index=True, default=400)),
                ('long_term_idle', models.BooleanField(db_index=True, default=False)),
                ('last_active_message_id', models.IntegerField(null=True)),
                ('is_mirror_dummy', models.BooleanField(default=False)),
                ('is_api_super_user', models.BooleanField(db_index=True, default=False)),
                ('enable_stream_desktop_notifications', models.BooleanField(default=False)),
                ('enable_stream_email_notifications', models.BooleanField(default=False)),
                ('enable_stream_push_notifications', models.BooleanField(default=False)),
                ('enable_stream_audible_notifications', models.BooleanField(default=False)),
                ('notification_sound', models.CharField(default='zulip', max_length=20)),
                ('wildcard_mentions_notify', models.BooleanField(default=True)),
                ('enable_desktop_notifications', models.BooleanField(default=True)),
                ('pm_content_in_desktop_notifications', models.BooleanField(default=True)),
                ('enable_sounds', models.BooleanField(default=True)),
                ('enable_offline_email_notifications', models.BooleanField(default=True)),
                ('message_content_in_email_notifications', models.BooleanField(default=True)),
                ('enable_offline_push_notifications', models.BooleanField(default=True)),
                ('enable_online_push_notifications', models.BooleanField(default=True)),
                ('desktop_icon_count_display', models.PositiveSmallIntegerField(default=1)),
                ('enable_digest_emails', models.BooleanField(default=True)),
                ('enable_login_emails', models.BooleanField(default=True)),
                ('realm_name_in_notifications', models.BooleanField(default=False)),
                ('alert_words', models.TextField(default='[]')),
                ('last_reminder', models.DateTimeField(default=None, null=True)),
                ('rate_limits', models.CharField(default='', max_length=100)),
                ('default_all_public_streams', models.BooleanField(default=False)),
                ('enter_sends', models.NullBooleanField(default=False)),
                ('left_side_userlist', models.BooleanField(default=False)),
                ('default_language', models.CharField(default='en', max_length=50)),
                ('dense_mode', models.BooleanField(default=True)),
                ('fluid_layout_width', models.BooleanField(default=False)),
                ('high_contrast_mode', models.BooleanField(default=False)),
                ('night_mode', models.BooleanField(default=False)),
                ('translate_emoticons', models.BooleanField(default=False)),
                ('twenty_four_hour_time', models.BooleanField(default=False)),
                ('starred_message_counts', models.BooleanField(default=False)),
                ('demote_inactive_streams', models.PositiveSmallIntegerField(default=1)),
                ('timezone', models.CharField(default='', max_length=40)),
                ('emojiset', models.CharField(choices=[('google', 'Google modern'), ('google-blob', 'Google classic'), ('twitter', 'Twitter'), ('text', 'Plain text')], default='google-blob', max_length=20)),
                ('avatar_source', models.CharField(choices=[('G', 'Hosted by Gravatar'), ('U', 'Uploaded by user')], default='G', max_length=1)),
                ('avatar_version', models.PositiveSmallIntegerField(default=1)),
                ('avatar_hash', models.CharField(max_length=64, null=True)),
                ('tutorial_status', models.CharField(choices=[('W', 'Waiting'), ('S', 'Started'), ('F', 'Finished')], default='W', max_length=1)),
                ('onboarding_steps', models.TextField(default='[]')),
                ('bot_owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ArchivedMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(db_index=True, max_length=60)),
                ('content', models.TextField()),
                ('rendered_content', models.TextField(null=True)),
                ('rendered_content_version', models.IntegerField(null=True)),
                ('date_sent', models.DateTimeField(db_index=True, verbose_name='date sent')),
                ('last_edit_time', models.DateTimeField(null=True)),
                ('edit_history', models.TextField(null=True)),
                ('has_attachment', models.BooleanField(db_index=True, default=False)),
                ('has_image', models.BooleanField(db_index=True, default=False)),
                ('has_link', models.BooleanField(db_index=True, default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=30, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(db_index=True, max_length=60)),
                ('content', models.TextField()),
                ('rendered_content', models.TextField(null=True)),
                ('rendered_content_version', models.IntegerField(null=True)),
                ('date_sent', models.DateTimeField(db_index=True, verbose_name='date sent')),
                ('last_edit_time', models.DateTimeField(null=True)),
                ('edit_history', models.TextField(null=True)),
                ('has_attachment', models.BooleanField(db_index=True, default=False)),
                ('has_image', models.BooleanField(db_index=True, default=False)),
                ('has_link', models.BooleanField(db_index=True, default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Realm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, null=True)),
                ('description', models.TextField(default='')),
                ('string_id', models.CharField(max_length=40, unique=True)),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now)),
                ('deactivated', models.BooleanField(default=False)),
                ('emails_restricted_to_domains', models.BooleanField(default=False)),
                ('invite_required', models.BooleanField(default=True)),
                ('invite_by_admins_only', models.BooleanField(default=False)),
                ('_max_invites', models.IntegerField(db_column='max_invites', null=True)),
                ('disallow_disposable_email_addresses', models.BooleanField(default=True)),
                ('authentication_methods', bitfield.models.BitField(['Google', 'Email', 'GitHub', 'LDAP', 'Dev', 'RemoteUser', 'AzureAD', 'SAML', 'GitLab'], default=2147483647)),
                ('inline_image_preview', models.BooleanField(default=True)),
                ('inline_url_embed_preview', models.BooleanField(default=False)),
                ('digest_emails_enabled', models.BooleanField(default=False)),
                ('digest_weekday', models.SmallIntegerField(default=1)),
                ('send_welcome_emails', models.BooleanField(default=True)),
                ('message_content_allowed_in_email_notifications', models.BooleanField(default=True)),
                ('mandatory_topics', models.BooleanField(default=False)),
                ('add_emoji_by_admins_only', models.BooleanField(default=False)),
                ('name_changes_disabled', models.BooleanField(default=False)),
                ('email_changes_disabled', models.BooleanField(default=False)),
                ('avatar_changes_disabled', models.BooleanField(default=False)),
                ('create_stream_policy', models.PositiveSmallIntegerField(default=1)),
                ('invite_to_stream_policy', models.PositiveSmallIntegerField(default=1)),
                ('user_group_edit_policy', models.PositiveSmallIntegerField(default=1)),
                ('private_message_policy', models.PositiveSmallIntegerField(default=1)),
                ('email_address_visibility', models.PositiveSmallIntegerField(default=1)),
                ('waiting_period_threshold', models.PositiveIntegerField(default=0)),
                ('allow_message_deleting', models.BooleanField(default=False)),
                ('message_content_delete_limit_seconds', models.IntegerField(default=600)),
                ('allow_message_editing', models.BooleanField(default=True)),
                ('message_content_edit_limit_seconds', models.IntegerField(default=600)),
                ('allow_edit_history', models.BooleanField(default=True)),
                ('allow_community_topic_editing', models.BooleanField(default=True)),
                ('default_twenty_four_hour_time', models.BooleanField(default=False)),
                ('default_language', models.CharField(default='en', max_length=50)),
                ('message_retention_days', models.IntegerField(null=True)),
                ('message_visibility_limit', models.IntegerField(null=True)),
                ('first_visible_message_id', models.IntegerField(default=0)),
                ('org_type', models.PositiveSmallIntegerField(default=1)),
                ('plan_type', models.PositiveSmallIntegerField(default=1)),
                ('bot_creation_policy', models.PositiveSmallIntegerField(default=1)),
                ('upload_quota_gb', models.IntegerField(null=True)),
                ('video_chat_provider', models.PositiveSmallIntegerField(default=1)),
                ('google_hangouts_domain', models.TextField(default='')),
                ('zoom_user_id', models.TextField(default='')),
                ('zoom_api_key', models.TextField(default='')),
                ('zoom_api_secret', models.TextField(default='')),
                ('default_code_block_language', models.TextField(default=None, null=True)),
                ('icon_source', models.CharField(choices=[('G', 'Hosted by Gravatar'), ('U', 'Uploaded by administrator')], default='G', max_length=1)),
                ('icon_version', models.PositiveSmallIntegerField(default=1)),
                ('logo_source', models.CharField(choices=[('D', 'Default to Zulip'), ('U', 'Uploaded by administrator')], default='D', max_length=1)),
                ('logo_version', models.PositiveSmallIntegerField(default=1)),
                ('night_logo_source', models.CharField(choices=[('D', 'Default to Zulip'), ('U', 'Uploaded by administrator')], default='D', max_length=1)),
                ('night_logo_version', models.PositiveSmallIntegerField(default=1)),
            ],
            options={
                'permissions': (('administer', 'Administer a realm'), ('api_super_user', 'Can send messages as other users for mirroring')),
            },
        ),
        migrations.CreateModel(
            name='Recipient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_id', models.IntegerField(db_index=True)),
                ('type', models.PositiveSmallIntegerField(db_index=True)),
            ],
            options={
                'unique_together': {('type', 'type_id')},
            },
        ),
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(default='')),
            ],
        ),
        migrations.CreateModel(
            name='UserStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField()),
                ('status', models.PositiveSmallIntegerField(default=0)),
                ('status_text', models.CharField(default='', max_length=255)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.Client')),
                ('user_profile', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserGroupMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.UserGroup')),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user_group', 'user_profile')},
            },
        ),
        migrations.AddField(
            model_name='usergroup',
            name='members',
            field=models.ManyToManyField(through='zerver.UserGroupMembership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='usergroup',
            name='realm',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.Realm'),
        ),
        migrations.CreateModel(
            name='UserActivityInterval',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateTimeField(db_index=True, verbose_name='start time')),
                ('end', models.DateTimeField(db_index=True, verbose_name='end time')),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SubMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('msg_type', models.TextField()),
                ('content', models.TextField()),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.Message')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Stream',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=60)),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now)),
                ('deactivated', models.BooleanField(default=False)),
                ('description', models.CharField(default='', max_length=1024)),
                ('rendered_description', models.TextField(default='')),
                ('invite_only', models.NullBooleanField(default=False)),
                ('history_public_to_subscribers', models.BooleanField(default=False)),
                ('is_web_public', models.BooleanField(default=False)),
                ('stream_post_policy', models.PositiveSmallIntegerField(default=1)),
                ('is_in_zephyr_realm', models.BooleanField(default=False)),
                ('email_token', models.CharField(default=zerver.models.generate_email_token_for_stream, max_length=32, unique=True)),
                ('message_retention_days', models.IntegerField(default=None, null=True)),
                ('first_message_id', models.IntegerField(db_index=True, null=True)),
                ('realm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.Realm')),
                ('recipient', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='zerver.Recipient')),
            ],
            options={
                'unique_together': {('name', 'realm')},
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('base_url', models.TextField()),
                ('token', models.TextField()),
                ('interface', models.PositiveSmallIntegerField(default=1)),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ScheduledMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=60)),
                ('content', models.TextField()),
                ('scheduled_timestamp', models.DateTimeField(db_index=True)),
                ('delivered', models.BooleanField(default=False)),
                ('delivery_type', models.PositiveSmallIntegerField(choices=[(1, 'send_later'), (2, 'remind')], default=1)),
                ('realm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.Realm')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.Recipient')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('sending_client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.Client')),
                ('stream', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='zerver.Stream')),
            ],
        ),
        migrations.CreateModel(
            name='ScheduledEmail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scheduled_timestamp', models.DateTimeField(db_index=True)),
                ('data', models.TextField()),
                ('address', models.EmailField(db_index=True, max_length=254, null=True)),
                ('type', models.PositiveSmallIntegerField()),
                ('realm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.Realm')),
                ('users', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RealmEmoji',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(validators=[django.core.validators.MinLengthValidator(1), django.core.validators.RegexValidator(message='Invalid characters in emoji name', regex='^[0-9a-z.\\-_]+(?<![.\\-_])$')])),
                ('file_name', models.TextField(blank=True, db_index=True, null=True)),
                ('deactivated', models.BooleanField(default=False)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('realm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.Realm')),
            ],
        ),
        migrations.CreateModel(
            name='RealmAuditLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_time', models.DateTimeField(db_index=True)),
                ('backfilled', models.BooleanField(default=False)),
                ('extra_data', models.TextField(null=True)),
                ('event_type', models.PositiveSmallIntegerField()),
                ('event_last_message_id', models.IntegerField(null=True)),
                ('acting_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_stream', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='zerver.Stream')),
                ('modified_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('realm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.Realm')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='realm',
            name='notifications_stream',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='zerver.Stream'),
        ),
        migrations.AddField(
            model_name='realm',
            name='signup_notifications_stream',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='zerver.Stream'),
        ),
        migrations.CreateModel(
            name='PreregistrationUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('full_name', models.CharField(max_length=100, null=True)),
                ('full_name_validated', models.BooleanField(default=False)),
                ('invited_at', models.DateTimeField(auto_now=True)),
                ('realm_creation', models.BooleanField(default=False)),
                ('password_required', models.BooleanField(default=True)),
                ('status', models.IntegerField(default=0)),
                ('invited_as', models.PositiveSmallIntegerField(default=1)),
                ('realm', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='zerver.Realm')),
                ('referred_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('streams', models.ManyToManyField(to='zerver.Stream')),
            ],
        ),
        migrations.CreateModel(
            name='MultiuseInvite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invited_as', models.PositiveSmallIntegerField(default=1)),
                ('realm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.Realm')),
                ('referred_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('streams', models.ManyToManyField(to='zerver.Stream')),
            ],
        ),
        migrations.CreateModel(
            name='MissedMessageEmailAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_token', models.CharField(db_index=True, max_length=34, unique=True)),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('times_used', models.PositiveIntegerField(db_index=True, default=0)),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.Message')),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='message',
            name='recipient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.Recipient'),
        ),
        migrations.AddField(
            model_name='message',
            name='sender',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='message',
            name='sending_client',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.Client'),
        ),
        migrations.CreateModel(
            name='Huddle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('huddle_hash', models.CharField(db_index=True, max_length=40, unique=True)),
                ('recipient', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='zerver.Recipient')),
            ],
        ),
        migrations.CreateModel(
            name='EmailChangeStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('new_email', models.EmailField(max_length=254)),
                ('old_email', models.EmailField(max_length=254)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.IntegerField(default=0)),
                ('realm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.Realm')),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CustomProfileField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
                ('hint', models.CharField(default='', max_length=80, null=True)),
                ('order', models.IntegerField(default=0)),
                ('field_type', models.PositiveSmallIntegerField(choices=[(1, 'Short text'), (2, 'Long text'), (4, 'Date picker'), (5, 'Link'), (7, 'External account'), (3, 'List of options'), (6, 'Person picker')], default=1)),
                ('field_data', models.TextField(default='', null=True)),
                ('realm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.Realm')),
            ],
            options={
                'unique_together': {('realm', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_name', models.TextField(db_index=True)),
                ('path_id', models.TextField(db_index=True, unique=True)),
                ('create_time', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('size', models.IntegerField(null=True)),
                ('is_realm_public', models.BooleanField(default=False)),
                ('messages', models.ManyToManyField(to='zerver.Message')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('realm', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='zerver.Realm')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArchiveTransaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('restored', models.BooleanField(db_index=True, default=False)),
                ('type', models.PositiveSmallIntegerField(db_index=True)),
                ('realm', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='zerver.Realm')),
            ],
        ),
        migrations.CreateModel(
            name='ArchivedSubMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('msg_type', models.TextField()),
                ('content', models.TextField()),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.ArchivedMessage')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='archivedmessage',
            name='archive_transaction',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.ArchiveTransaction'),
        ),
        migrations.AddField(
            model_name='archivedmessage',
            name='recipient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.Recipient'),
        ),
        migrations.AddField(
            model_name='archivedmessage',
            name='sender',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='archivedmessage',
            name='sending_client',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.Client'),
        ),
        migrations.CreateModel(
            name='ArchivedAttachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_name', models.TextField(db_index=True)),
                ('path_id', models.TextField(db_index=True, unique=True)),
                ('create_time', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('size', models.IntegerField(null=True)),
                ('is_realm_public', models.BooleanField(default=False)),
                ('messages', models.ManyToManyField(to='zerver.ArchivedMessage')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('realm', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='zerver.Realm')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='userprofile',
            name='default_events_register_stream',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='zerver.Stream'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='default_sending_stream',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='zerver.Stream'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='realm',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.Realm'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='recipient',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='zerver.Recipient'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='UserPresence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(verbose_name='presence changed')),
                ('status', models.PositiveSmallIntegerField(default=1)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.Client')),
                ('realm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.Realm')),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user_profile', 'client')},
                'index_together': {('realm', 'timestamp')},
            },
        ),
        migrations.CreateModel(
            name='UserMessage',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('flags', bitfield.models.BitField(['read', 'starred', 'collapsed', 'mentioned', 'wildcard_mentioned', 'summarize_in_home', 'summarize_in_stream', 'force_expand', 'force_collapse', 'has_alert_word', 'historical', 'is_private', 'active_mobile_push_notification'], default=0)),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.Message')),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'unique_together': {('user_profile', 'message')},
            },
        ),
        migrations.CreateModel(
            name='UserHotspot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hotspot', models.CharField(max_length=30)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'hotspot')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='usergroup',
            unique_together={('realm', 'name')},
        ),
        migrations.CreateModel(
            name='UserActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.CharField(db_index=True, max_length=50)),
                ('count', models.IntegerField()),
                ('last_visit', models.DateTimeField(verbose_name='last visit')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.Client')),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user_profile', 'client', 'query')},
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('is_muted', models.NullBooleanField(default=False)),
                ('color', models.CharField(default='#c2c2c2', max_length=10)),
                ('pin_to_top', models.BooleanField(default=False)),
                ('desktop_notifications', models.NullBooleanField(default=None)),
                ('audible_notifications', models.NullBooleanField(default=None)),
                ('push_notifications', models.NullBooleanField(default=None)),
                ('email_notifications', models.NullBooleanField(default=None)),
                ('wildcard_mentions_notify', models.NullBooleanField(default=None)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.Recipient')),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user_profile', 'recipient')},
            },
        ),
        migrations.CreateModel(
            name='RealmFilter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pattern', models.TextField(validators=[zerver.models.filter_pattern_validator])),
                ('url_format_string', models.TextField(validators=[django.core.validators.URLValidator(), zerver.models.filter_format_validator])),
                ('realm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.Realm')),
            ],
            options={
                'unique_together': {('realm', 'pattern')},
            },
        ),
        # We need to create and then rename RealmDomain to ensure the
        # sequence table has the right name.
        migrations.CreateModel(
            name='RealmAlias',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(db_index=True, max_length=80)),
                ('allow_subdomains', models.BooleanField(default=False)),
                ('realm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.Realm')),
            ],
            options={
                'unique_together': {('realm', 'domain')},
            },
        ),
        migrations.RenameModel(
            old_name='RealmAlias',
            new_name='RealmDomain',
        ),
        migrations.CreateModel(
            name='Reaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('emoji_name', models.TextField()),
                ('reaction_type', models.CharField(choices=[('unicode_emoji', 'Unicode emoji'), ('realm_emoji', 'Custom emoji'), ('zulip_extra_emoji', 'Zulip extra emoji')], default='unicode_emoji', max_length=30)),
                ('emoji_code', models.TextField()),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.Message')),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'unique_together': {('user_profile', 'message', 'emoji_name')},
            },
        ),
        migrations.CreateModel(
            name='PushDeviceToken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kind', models.PositiveSmallIntegerField(choices=[(1, 'apns'), (2, 'gcm')])),
                ('token', models.CharField(db_index=True, max_length=4096)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('ios_app_id', models.TextField(null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'kind', 'token')},
            },
        ),
        migrations.CreateModel(
            name='MutedTopic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topic_name', models.CharField(max_length=60)),
                ('date_muted', models.DateTimeField(default=datetime.datetime(2020, 1, 1, 0, 0))),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.Recipient')),
                ('stream', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.Stream')),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user_profile', 'stream', 'topic_name')},
            },
        ),
        migrations.CreateModel(
            name='DefaultStreamGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=60)),
                ('description', models.CharField(default='', max_length=1024)),
                ('realm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.Realm')),
                ('streams', models.ManyToManyField(to='zerver.Stream')),
            ],
            options={
                'unique_together': {('realm', 'name')},
            },
        ),
        migrations.CreateModel(
            name='DefaultStream',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('realm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.Realm')),
                ('stream', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.Stream')),
            ],
            options={
                'unique_together': {('realm', 'stream')},
            },
        ),
        migrations.CreateModel(
            name='CustomProfileFieldValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField()),
                ('rendered_value', models.TextField(default=None, null=True)),
                ('field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.CustomProfileField')),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user_profile', 'field')},
            },
        ),
        migrations.CreateModel(
            name='BotUserStateData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.TextField(db_index=True)),
                ('value', models.TextField()),
                ('bot_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('bot_profile', 'key')},
            },
        ),
        migrations.RenameModel(
            old_name='BotUserStateData',
            new_name='BotStorageData',
        ),
        migrations.CreateModel(
            name='BotUserConfigData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.TextField(db_index=True)),
                ('value', models.TextField()),
                ('bot_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('bot_profile', 'key')},
            },
        ),
        migrations.RenameModel(
            old_name='BotUserConfigData',
            new_name='BotConfigData',
        ),
        migrations.CreateModel(
            name='ArchivedUserMessage',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('flags', bitfield.models.BitField(['read', 'starred', 'collapsed', 'mentioned', 'wildcard_mentioned', 'summarize_in_home', 'summarize_in_stream', 'force_expand', 'force_collapse', 'has_alert_word', 'historical', 'is_private', 'active_mobile_push_notification'], default=0)),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.ArchivedMessage')),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'unique_together': {('user_profile', 'message')},
            },
        ),
        migrations.CreateModel(
            name='ArchivedReaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('emoji_name', models.TextField()),
                ('reaction_type', models.CharField(choices=[('unicode_emoji', 'Unicode emoji'), ('realm_emoji', 'Custom emoji'), ('zulip_extra_emoji', 'Zulip extra emoji')], default='unicode_emoji', max_length=30)),
                ('emoji_code', models.TextField()),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zerver.ArchivedMessage')),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'unique_together': {('user_profile', 'message', 'emoji_name')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='userprofile',
            unique_together={('realm', 'email')},
        ),
        # RunSQL migrations creating index from original 0001_initial.py
        migrations.RunSQL(
            sql=fts_sql,
        ),
        migrations.RunSQL(
            sql='CREATE INDEX upper_subject_idx ON zerver_message ((upper(subject)));',
            reverse_sql='DROP INDEX upper_subject_idx;',
        ),
        migrations.RunSQL(
            sql='CREATE INDEX upper_stream_name_idx ON zerver_stream ((upper(name)));',
            reverse_sql='DROP INDEX upper_stream_name_idx;',
        ),
        migrations.RunSQL(
            sql='CREATE INDEX upper_userprofile_email_idx ON zerver_userprofile ((upper(email)));',
            reverse_sql='DROP INDEX upper_userprofile_email_idx;',
        ),
        migrations.RunSQL(
            sql='CREATE INDEX upper_preregistration_email_idx ON zerver_preregistrationuser ((upper(email)));',
            reverse_sql='DROP INDEX upper_preregistration_email_idx;',
        ),
        # RunSQL migrations creating index from later migrations
        migrations.RunSQL(
            '''
            CREATE INDEX IF NOT EXISTS zerver_usermessage_starred_message_id
                ON zerver_usermessage (user_profile_id, message_id)
                WHERE (flags & 2) != 0;
            ''',
            reverse_sql='DROP INDEX zerver_usermessage_starred_message_id;'
        ),
        migrations.RunSQL(
            '''
            CREATE INDEX IF NOT EXISTS zerver_usermessage_mentioned_message_id
                ON zerver_usermessage (user_profile_id, message_id)
                WHERE (flags & 8) != 0;
            ''',
            reverse_sql='DROP INDEX zerver_usermessage_mentioned_message_id;'
        ),
        migrations.RunSQL(
            '''
            CREATE INDEX IF NOT EXISTS zerver_usermessage_unread_message_id
                ON zerver_usermessage (user_profile_id, message_id)
                WHERE (flags & 1) = 0;
            ''',
            reverse_sql='DROP INDEX zerver_usermessage_unread_message_id;'
        ),
        migrations.RunSQL(
            '''
            CREATE INDEX IF NOT EXISTS zerver_usermessage_has_alert_word_message_id
                ON zerver_usermessage (user_profile_id, message_id)
                WHERE (flags & 512) != 0;
            ''',
            reverse_sql='DROP INDEX zerver_usermessage_has_alert_word_message_id;'
        ),
        migrations.RunSQL(
            '''
            CREATE INDEX IF NOT EXISTS zerver_usermessage_wildcard_mentioned_message_id
                ON zerver_usermessage (user_profile_id, message_id)
                WHERE (flags & 8) != 0 OR (flags & 16) != 0;
            ''',
            reverse_sql='DROP INDEX zerver_usermessage_wilcard_mentioned_message_id;'
        ),
        migrations.RunSQL(
            '''
            CREATE INDEX zerver_mutedtopic_stream_topic
            ON zerver_mutedtopic
            (stream_id, upper(topic_name))
            ''',
            reverse_sql='DROP INDEX zerver_mutedtopic_stream_topic;'
        ),
        migrations.RunSQL(
            '''
            CREATE INDEX IF NOT EXISTS zerver_usermessage_is_private_message_id
                ON zerver_usermessage (user_profile_id, message_id)
                WHERE (flags & 2048) != 0;
            ''',
            reverse_sql='DROP INDEX zerver_usermessage_is_private_message_id;'
        ),
        migrations.RunSQL(
            '''
            CREATE INDEX IF NOT EXISTS zerver_usermessage_active_mobile_push_notification_id
                ON zerver_usermessage (user_profile_id, message_id)
                WHERE (flags & 4096) != 0;
            ''',
            reverse_sql='DROP INDEX zerver_usermessage_active_mobile_push_notification_id;'
        ),
    ]
