#!/usr/bin/env python3
import glob
import colorsys
import re

# check for the venv
from lib import sanity_check
sanity_check.check_venv(__file__)

from lib.css_parser import parse
from lib.css_tools import (
    convert_colors,
    invert,
    is_color_scheme,
)

def dark_modify(s):
    if s.startswith('#') or s.startswith('.'):
        return '.dark-mode ' + s
    elif s == 'body':
        return s + '.dark-mode'
    else:
        return '.dark-mode ' + s

def process_file(fn):
    dct = {}
    text = open(fn).read()
    section_list = parse(text)
    for section in section_list.sections:
        if hasattr(section, 'declaration_block'):
            for declaration in section.declaration_block.declarations:
                if not is_color_scheme(declaration, fn):
                    continue

                prop = declaration.css_property
                value = declaration.css_value.text().strip()

                value = convert_colors(value)
                value = invert(value)
                
                selectors = [
                    sel.text().strip()
                    for sel in section.selector_list.selectors
                ]
                sig = (value, prop)
                if sig not in dct:
                    dct[sig] = []
                dct[sig] += selectors


    def write_dark():
        text = '\n\n/*\n   SOURCE FILE: %s\n*/\n' % (fn,)
        for k in sorted(dct):
            selectors = dct[k]
            lst = ',\n'.join(dark_modify(s) for s in sorted(selectors)) + ' {\n'
            value, prop = k
            text += lst
            text += '    %s: %s;\n' % (prop, value)
            text += '}\n\n'
        text = text.rstrip()
        if 'bootstrap' in fn:
            out_fn = 'static/styles/auto-bootstrap-dark.css'
        else:
            out_fn = 'static/styles/auto-dark.css'

        open(out_fn, 'a').write(text)

    if dct:
        write_dark()

def process_files(filenames):

    open('static/styles/auto-dark.css', 'w').write('')
    open('static/styles/auto-bootstrap-dark.css', 'w').write('')

    for fn in filenames:
        if 'dark' in fn:
            continue
        if 'portico' in fn:
            continue
        if 'landing-page' in fn:
            continue
        if 'pygments' in fn:
            continue
        if 'stats' in fn:
            continue
        if 'stream_color' in fn:
            # These styles should not be inverted for dark mode.
            continue
        process_file(fn)

if __name__ == '__main__':
    filenames = glob.glob('static/styles/*.css')
    filenames += [
        'static/third/bootstrap/css/bootstrap.css',

    ]
    process_files(filenames)

